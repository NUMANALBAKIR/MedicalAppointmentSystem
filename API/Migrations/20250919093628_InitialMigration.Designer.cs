// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250919093628_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Tension headache",
                            DoctorId = 1,
                            Notes = "Headache",
                            PatientId = 1,
                            VisitType = "First Visit"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2024, 1, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Hypertension",
                            DoctorId = 2,
                            Notes = "BP check",
                            PatientId = 2,
                            VisitType = "Follow-up"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2024, 2, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Improved",
                            DoctorId = 1,
                            Notes = "Headache follow-up",
                            PatientId = 1,
                            VisitType = "Follow-up"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2024, 2, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Bronchitis",
                            DoctorId = 3,
                            Notes = "Cough",
                            PatientId = 3,
                            VisitType = "First Visit"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2024, 2, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Healthy",
                            DoctorId = 4,
                            Notes = "Annual checkup",
                            PatientId = 4,
                            VisitType = "Follow-up"
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDate = new DateTime(2024, 3, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Gastritis",
                            DoctorId = 5,
                            Notes = "Stomach pain",
                            PatientId = 5,
                            VisitType = "First Visit"
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDate = new DateTime(2024, 3, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Hypothyroidism",
                            DoctorId = 6,
                            Notes = "Thyroid check",
                            PatientId = 6,
                            VisitType = "Follow-up"
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDate = new DateTime(2024, 3, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "Improving",
                            DoctorId = 2,
                            Notes = "Cough persists",
                            PatientId = 3,
                            VisitType = "Follow-up"
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDate = new DateTime(2024, 3, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = "High cholesterol",
                            DoctorId = 1,
                            Notes = "Cholesterol review",
                            PatientId = 4,
                            VisitType = "First Visit"
                        });
                });

            modelBuilder.Entity("API.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dr. Smith"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dr. Brown"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dr. Taylor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dr. Wilson"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dr. Carter"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dr. Adams"
                        });
                });

            modelBuilder.Entity("API.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Metformin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amoxicillin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ibuprofen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Atorvastatin"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Omeprazole"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Losartan"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Levothyroxine"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Azithromycin"
                        });
                });

            modelBuilder.Entity("API.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john@email.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane@email.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "alice@email.com",
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            Id = 4,
                            Email = "bob@email.com",
                            Name = "Bob Lee"
                        },
                        new
                        {
                            Id = 5,
                            Email = "clara@email.com",
                            Name = "Clara Oswald"
                        },
                        new
                        {
                            Id = 6,
                            Email = "david@email.com",
                            Name = "Numan"
                        });
                });

            modelBuilder.Entity("API.Entities.PrescriptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PrescriptionDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Dosage = "500mg twice daily",
                            EndDate = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 1,
                            Notes = "With food",
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            Dosage = "500mg once daily",
                            EndDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 2,
                            Notes = "Before breakfast",
                            StartDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 1,
                            Dosage = "250mg three times daily",
                            EndDate = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 3,
                            Notes = "Full course",
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            Dosage = "200mg twice daily",
                            EndDate = new DateTime(2024, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 4,
                            Notes = "After meals",
                            StartDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            Dosage = "10mg daily",
                            EndDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 5,
                            Notes = "Monitor cholesterol",
                            StartDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 6,
                            Dosage = "20mg daily",
                            EndDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 6,
                            Notes = "Before meals",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 7,
                            Dosage = "100mcg daily",
                            EndDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 8,
                            Notes = "Morning dose",
                            StartDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 8,
                            Dosage = "500mg once daily",
                            EndDate = new DateTime(2024, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 9,
                            Notes = "With water",
                            StartDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 9,
                            Dosage = "10mg daily",
                            EndDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 5,
                            Notes = "Monitor lipid profile",
                            StartDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 4,
                            Dosage = "250mg twice daily",
                            EndDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 3,
                            Notes = "Complete course",
                            StartDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AppointmentId = 6,
                            Dosage = "20mg daily",
                            EndDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 6,
                            Notes = "Before meals",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AppointmentId = 7,
                            Dosage = "100mcg daily",
                            EndDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineId = 8,
                            Notes = "Morning dose",
                            StartDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("API.Entities.Appointment", b =>
                {
                    b.HasOne("API.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.Entities.PrescriptionDetail", b =>
                {
                    b.HasOne("API.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("API.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("API.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("API.Entities.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("API.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
