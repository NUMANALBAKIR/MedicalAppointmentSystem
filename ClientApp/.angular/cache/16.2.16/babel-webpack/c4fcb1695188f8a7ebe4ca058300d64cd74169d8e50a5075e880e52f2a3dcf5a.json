{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let AppointmentFormComponent = class AppointmentFormComponent {\n  constructor(fb, appointmentService, router, route) {\n    this.fb = fb;\n    this.appointmentService = appointmentService;\n    this.router = router;\n    this.route = route;\n    this.isEditMode = false;\n    this.appointmentId = null;\n    this.appointmentForm = this.createForm();\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.appointmentId = +params['id'];\n        this.loadAppointment(this.appointmentId);\n      }\n    });\n  }\n  createForm() {\n    return this.fb.group({\n      patient: ['', Validators.required],\n      doctor: ['', Validators.required],\n      date: ['', Validators.required],\n      visitType: ['', Validators.required],\n      notes: [''],\n      diagnosis: ['']\n    });\n  }\n  // get prescriptionsArray(): FormArray {\n  //   return this.appointmentForm.get('prescriptions') as FormArray;\n  // }\n  // createPrescriptionForm(prescription?: Prescription): FormGroup {\n  //   return this.fb.group({\n  //     medicine: [prescription?.medicine || ''],\n  //     dosage: [prescription?.dosage || ''],\n  //     startDate: [prescription?.startDate || ''],\n  //     endDate: [prescription?.endDate || ''],\n  //     notes: [prescription?.notes || '']\n  //   });\n  // }\n  // addPrescriptionRow(): void {\n  //   this.prescriptionsArray.push(this.createPrescriptionForm());\n  // }\n  // removePrescriptionRow(index: number): void {\n  //   this.prescriptionsArray.removeAt(index);\n  // }\n  loadAppointment(id) {\n    const appointment = this.appointmentService.getAppointmentById(id);\n    if (appointment) {\n      this.appointmentForm.patchValue({\n        patient: appointment.patient,\n        doctor: appointment.doctor,\n        date: appointment.date,\n        visitType: appointment.visitType,\n        notes: appointment.notes,\n        diagnosis: appointment.diagnosis\n      });\n      // Load prescriptions\n      // appointment.prescriptions.forEach(prescription => {\n      //   this.prescriptionsArray.push(this.createPrescriptionForm(prescription));\n      // });\n    }\n  }\n\n  onSubmit() {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue);\n      } else {\n        this.appointmentService.createAppointment(formValue);\n      }\n      this.router.navigate(['/appointment-list']);\n    }\n  }\n  cancel() {\n    this.router.navigate(['/appointment-list']);\n  }\n  isFieldInvalid(fieldName) {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n};\nAppointmentFormComponent = __decorate([Component({\n  selector: 'app-appointment-form',\n  templateUrl: './appointment-form.component.html',\n  styleUrls: ['./appointment-form.component.css']\n})], AppointmentFormComponent);","map":{"version":3,"names":["Component","Validators","AppointmentFormComponent","constructor","fb","appointmentService","router","route","isEditMode","appointmentId","appointmentForm","createForm","ngOnInit","params","subscribe","loadAppointment","group","patient","required","doctor","date","visitType","notes","diagnosis","id","appointment","getAppointmentById","patchValue","onSubmit","valid","formValue","value","updateAppointment","createAppointment","navigate","cancel","isFieldInvalid","fieldName","field","get","invalid","dirty","touched","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\appointment-form\\appointment-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AppointmentService } from '../_services/appointment.service';\n\n@Component({\n  selector: 'app-appointment-form',\n  templateUrl: './appointment-form.component.html',\n  styleUrls: ['./appointment-form.component.css']\n})\nexport class AppointmentFormComponent implements OnInit {\n  appointmentForm: FormGroup;\n  isEditMode = false;\n  appointmentId: number | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    public appointmentService: AppointmentService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.appointmentForm = this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.appointmentId = +params['id'];\n        this.loadAppointment(this.appointmentId);\n      }\n    });\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      patient: ['', Validators.required],\n      doctor: ['', Validators.required],\n      date: ['', Validators.required],\n      visitType: ['', Validators.required],\n      notes: [''],\n      diagnosis: [''],\n    });\n  }\n\n  // get prescriptionsArray(): FormArray {\n  //   return this.appointmentForm.get('prescriptions') as FormArray;\n  // }\n\n  // createPrescriptionForm(prescription?: Prescription): FormGroup {\n  //   return this.fb.group({\n  //     medicine: [prescription?.medicine || ''],\n  //     dosage: [prescription?.dosage || ''],\n  //     startDate: [prescription?.startDate || ''],\n  //     endDate: [prescription?.endDate || ''],\n  //     notes: [prescription?.notes || '']\n  //   });\n  // }\n\n  // addPrescriptionRow(): void {\n  //   this.prescriptionsArray.push(this.createPrescriptionForm());\n  // }\n\n  // removePrescriptionRow(index: number): void {\n  //   this.prescriptionsArray.removeAt(index);\n  // }\n\n  loadAppointment(id: number): void {\n    const appointment = this.appointmentService.getAppointmentById(id);\n    if (appointment) {\n      this.appointmentForm.patchValue({\n        patient: appointment.patient,\n        doctor: appointment.doctor,\n        date: appointment.date,\n        visitType: appointment.visitType,\n        notes: appointment.notes,\n        diagnosis: appointment.diagnosis\n      });\n\n      // Load prescriptions\n      // appointment.prescriptions.forEach(prescription => {\n      //   this.prescriptionsArray.push(this.createPrescriptionForm(prescription));\n      // });\n    }\n  }\n\n  onSubmit(): void {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue);\n      } else {\n        this.appointmentService.createAppointment(formValue);\n      }\n\n      this.router.navigate(['/appointment-list']);\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/appointment-list']);\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}