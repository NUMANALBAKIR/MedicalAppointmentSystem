{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppointmentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //------------\n    this.appointments = [{\n      id: 1,\n      patient: 'John Doe',\n      doctor: 'Dr. Smith',\n      date: '2025-08-20',\n      visitType: 'First',\n      diagnosis: 'Fever',\n      notes: 'Patient complains of high fever',\n      prescriptions: [{\n        medicine: 'Paracetamol',\n        dosage: '500mg 2x/day',\n        startDate: '2025-08-20',\n        endDate: '2025-08-25',\n        notes: 'Take after meals'\n      }, {\n        medicine: 'Amoxicillin',\n        dosage: '250mg 3x/day',\n        startDate: '2025-08-20',\n        endDate: '2025-08-27',\n        notes: 'Before meal'\n      }]\n    }, {\n      id: 2,\n      patient: 'Jane Smith',\n      doctor: 'Dr. Brown',\n      date: '2025-08-21',\n      visitType: 'Follow-up',\n      diagnosis: 'Diabetes',\n      notes: 'Regular checkup',\n      prescriptions: [{\n        medicine: 'Metformin',\n        dosage: '850mg 1x/day',\n        startDate: '2025-08-21',\n        endDate: '2025-09-21',\n        notes: 'Morning dose'\n      }]\n    }];\n    this.appointmentsSubject = new BehaviorSubject(this.appointments);\n    this.appointments$ = this.appointmentsSubject.asObservable();\n    this.patients = ['John Doe', 'Jane Smith', 'Bob Johnson'];\n    this.doctors = ['Dr. Smith', 'Dr. Brown', 'Dr. Johnson'];\n    this.medicines = ['Paracetamol', 'Amoxicillin', 'Metformin', 'Aspirin', 'Ibuprofen', 'Omeprazole'];\n    this.url = `${environment.apiUrl}/Appointment`;\n  }\n  getAllDoctor() {\n    this.url = `${environment.apiUrl}/Appointment/`;\n    return this.httpClient.get(this.url, {\n      responseType: 'json'\n    });\n  }\n  getAllPatient() {\n    return this.httpClient.get(this.url, {\n      responseType: 'json'\n    });\n  }\n  getAppointments() {\n    return this.appointments$;\n  }\n  getAppointmentById(id) {\n    return this.appointments.find(a => a.id === id);\n  }\n  createAppointment(appointment) {\n    const newAppointment = {\n      ...appointment,\n      id: this.getNextId()\n    };\n    this.appointments.push(newAppointment);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  updateAppointment(id, appointment) {\n    const index = this.appointments.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.appointments[index] = {\n        ...appointment,\n        id\n      };\n      this.appointmentsSubject.next([...this.appointments]);\n    }\n  }\n  deleteAppointment(id) {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  getNextId() {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n  static {\n    this.ɵfac = function AppointmentService_Factory(t) {\n      return new (t || AppointmentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppointmentService,\n      factory: AppointmentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","environment","AppointmentService","constructor","httpClient","appointments","id","patient","doctor","date","visitType","diagnosis","notes","prescriptions","medicine","dosage","startDate","endDate","appointmentsSubject","appointments$","asObservable","patients","doctors","medicines","url","apiUrl","getAllDoctor","get","responseType","getAllPatient","getAppointments","getAppointmentById","find","a","createAppointment","appointment","newAppointment","getNextId","push","next","updateAppointment","index","findIndex","deleteAppointment","filter","length","Math","max","map","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\_services\\appointment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Appointment } from '../_models/appointment';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Doctor } from '../_models/Doctor';\nimport { Patient } from '../_models/Patient';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n    private url!: string;\n\n  constructor(private httpClient: HttpClient) {\n    this.url = `${environment.apiUrl}/Appointment`;\n  }\n\n  getAllDoctor(): Observable<Doctor[]> {\n    this.url = `${environment.apiUrl}/Appointment/`;\n    return this.httpClient.get<Doctor[]>(this.url, { responseType: 'json' });\n  }\n\n  getAllPatient(): Observable<Patient[]> {\n    return this.httpClient.get<Patient[]>(this.url, { responseType: 'json' });\n  }\n\n//------------\n\n  private appointments: Appointment[] = [\n    {\n      id: 1,\n      patient: 'John Doe',\n      doctor: 'Dr. Smith',\n      date: '2025-08-20',\n      visitType: 'First',\n      diagnosis: 'Fever',\n      notes: 'Patient complains of high fever',\n      prescriptions: [\n        { medicine: 'Paracetamol', dosage: '500mg 2x/day', startDate: '2025-08-20', endDate: '2025-08-25', notes: 'Take after meals' },\n        { medicine: 'Amoxicillin', dosage: '250mg 3x/day', startDate: '2025-08-20', endDate: '2025-08-27', notes: 'Before meal' }\n      ]\n    },\n    {\n      id: 2,\n      patient: 'Jane Smith',\n      doctor: 'Dr. Brown',\n      date: '2025-08-21',\n      visitType: 'Follow-up',\n      diagnosis: 'Diabetes',\n      notes: 'Regular checkup',\n      prescriptions: [\n        { medicine: 'Metformin', dosage: '850mg 1x/day', startDate: '2025-08-21', endDate: '2025-09-21', notes: 'Morning dose' }\n      ]\n    }\n  ];\n\n  private appointmentsSubject = new BehaviorSubject<Appointment[]>(this.appointments);\n  public appointments$ = this.appointmentsSubject.asObservable();\n\n  patients = ['John Doe', 'Jane Smith', 'Bob Johnson'];\n  doctors = ['Dr. Smith', 'Dr. Brown', 'Dr. Johnson'];\n  medicines = ['Paracetamol', 'Amoxicillin', 'Metformin', 'Aspirin', 'Ibuprofen', 'Omeprazole'];\n\n\n  getAppointments(): Observable<Appointment[]> {\n    return this.appointments$;\n  }\n\n  getAppointmentById(id: number): Appointment | undefined {\n    return this.appointments.find(a => a.id === id);\n  }\n\n  createAppointment(appointment: Omit<Appointment, 'id'>): void {\n    const newAppointment: Appointment = {\n      ...appointment,\n      id: this.getNextId()\n    };\n    this.appointments.push(newAppointment);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  updateAppointment(id: number, appointment: Omit<Appointment, 'id'>): void {\n    const index = this.appointments.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.appointments[index] = { ...appointment, id };\n      this.appointmentsSubject.next([...this.appointments]);\n    }\n  }\n\n  deleteAppointment(id: number): void {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  private getNextId(): number {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}