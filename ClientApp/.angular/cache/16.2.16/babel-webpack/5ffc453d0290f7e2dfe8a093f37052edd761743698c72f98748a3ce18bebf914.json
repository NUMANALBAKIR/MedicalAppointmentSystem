{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PrescriptionDetailsComponent = class PrescriptionDetailsComponent {\n  constructor(router, route, fb, appointmentService, dataService) {\n    this.router = router;\n    this.route = route;\n    this.fb = fb;\n    this.appointmentService = appointmentService;\n    this.dataService = dataService;\n    this.prescriptionFormGroup = this.createPrescriptionFormGroup();\n  }\n  ngOnInit() {\n    this.allMedicine = this.dataService.getMedicines();\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        let appointmentId = Number(params['id']);\n        this.loadAppointWithPrescriptions(appointmentId);\n      }\n    });\n  }\n  createPrescriptionFormGroup() {\n    return this.fb.group({\n      prescriptions: this.fb.array([])\n    });\n  }\n  createPrescriptionRow(prescription) {\n    return this.fb.group({\n      id: [prescription?.id || 0],\n      appointmentId: [prescription?.appointmentId || ''],\n      medicineId: [prescription?.medicineId || ''],\n      dosage: [prescription?.dosage || ''],\n      startDate: [prescription?.startDate.split('T')[0] || ''],\n      endDate: [prescription?.endDate.split('T')[0] || ''],\n      notes: [prescription?.notes || '']\n    });\n  }\n  get getPrescriptionArray() {\n    return this.prescriptionFormGroup.get('prescriptions');\n  }\n  addPrescriptionRow() {\n    this.getPrescriptionArray.push(this.createPrescriptionRow());\n  }\n  removePrescriptionRow(index) {\n    this.getPrescriptionArray.removeAt(index);\n  }\n  loadAppointWithPrescriptions(id) {\n    this.appointmentService.getAppointmentById(id).subscribe(appointment => {\n      if (appointment) {\n        if (appointment?.prescriptions?.length > 0) {\n          appointment.prescriptions.forEach(prescription => {\n            this.getPrescriptionArray.push(this.createPrescriptionRow(prescription));\n          });\n        } else {\n          this.addPrescriptionRow();\n        }\n      }\n    }, e => {\n      console.log('Error: ' + e);\n    });\n  }\n  onSubmit() {\n    if (this.prescriptionFormGroup.valid) {\n      const formValue = this.prescriptionFormGroup.value;\n      console.log('Prescriptions:', formValue.prescriptions);\n      // Process the prescription data here\n    }\n  }\n\n  cancel() {\n    this.router.navigate(['/appointment-list']);\n  }\n};\nPrescriptionDetailsComponent = __decorate([Component({\n  selector: 'app-prescription-details',\n  templateUrl: './prescription-details.component.html',\n  styleUrls: ['./prescription-details.component.css']\n})], PrescriptionDetailsComponent);","map":{"version":3,"names":["Component","PrescriptionDetailsComponent","constructor","router","route","fb","appointmentService","dataService","prescriptionFormGroup","createPrescriptionFormGroup","ngOnInit","allMedicine","getMedicines","params","subscribe","appointmentId","Number","loadAppointWithPrescriptions","group","prescriptions","array","createPrescriptionRow","prescription","id","medicineId","dosage","startDate","split","endDate","notes","getPrescriptionArray","get","addPrescriptionRow","push","removePrescriptionRow","index","removeAt","getAppointmentById","appointment","length","forEach","e","console","log","onSubmit","valid","formValue","value","cancel","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\prescription-details\\prescription-details.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AppointmentService } from '../_services/appointment.service';\nimport { MedicineDTO } from '../_models/medicineDTO';\nimport { Observable } from 'rxjs';\nimport { DataService } from '../_services/data.service';\nimport { PrescriptionDetailDTO } from '../_models/prescriptionDetailDTO';\nimport { AppointmentDTO } from '../_models/appointmentDTO';\n\n@Component({\n  selector: 'app-prescription-details',\n  templateUrl: './prescription-details.component.html',\n  styleUrls: ['./prescription-details.component.css']\n})\nexport class PrescriptionDetailsComponent implements OnInit {\n\n  prescriptionFormGroup!: FormGroup;\n  public allMedicine!: Observable<MedicineDTO[]>;\n  public appointment!: AppointmentDTO;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    public appointmentService: AppointmentService,\n    public dataService: DataService\n  ) {\n    this.prescriptionFormGroup = this.createPrescriptionFormGroup();\n  }\n\n  ngOnInit() {\n    this.allMedicine = this.dataService.getMedicines();\n\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        let appointmentId = Number(params['id']);\n        this.loadAppointWithPrescriptions(appointmentId);\n      }\n    });\n  }\n\n createPrescriptionFormGroup(): FormGroup {\n    return this.fb.group({\n      prescriptions: this.fb.array([])\n    });\n  }\n\n  createPrescriptionRow(prescription?: PrescriptionDetailDTO): FormGroup {\n    return this.fb.group({\n      id: [prescription?.id || 0],\n      appointmentId: [prescription?.appointmentId || ''],\n      medicineId: [prescription?.medicineId || ''],\n      dosage: [prescription?.dosage || ''],\n      startDate: [prescription?.startDate.split('T')[0] || ''],\n      endDate: [prescription?.endDate.split('T')[0] || ''],\n      notes: [prescription?.notes || ''],\n    });\n  }\n\n  get getPrescriptionArray(): FormArray {\n    return this.prescriptionFormGroup.get('prescriptions') as FormArray;\n  }\n\n  addPrescriptionRow(): void {\n    this.getPrescriptionArray.push(this.createPrescriptionRow());\n  }\n\n  removePrescriptionRow(index: number): void {\n    this.getPrescriptionArray.removeAt(index);\n  }\n\n  loadAppointWithPrescriptions(id: number): void {\n    this.appointmentService.getAppointmentById(id).subscribe(\n      (appointment: AppointmentDTO) => {\n        if (appointment) {\n          if (appointment?.prescriptions?.length > 0) {\n            appointment.prescriptions.forEach(prescription => {\n              this.getPrescriptionArray.push(this.createPrescriptionRow(prescription));\n            });\n          }\n          else {\n            this.addPrescriptionRow();\n          }\n        }\n      },\n      (e) => {\n        console.log('Error: ' + e);\n      }\n    );\n  }\n\n  onSubmit() {\n    if (this.prescriptionFormGroup.valid) {\n      const formValue = this.prescriptionFormGroup.value;\n      console.log('Prescriptions:', formValue.prescriptions);\n      // Process the prescription data here\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/appointment-list']);\n  }\n\n  // isFieldInvalid(fieldName: string): boolean {\n  //   const field = this.prescriptionForm.get(fieldName);\n  //   return !!(field && field.invalid && (field.dirty || field.touched));\n  // }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}