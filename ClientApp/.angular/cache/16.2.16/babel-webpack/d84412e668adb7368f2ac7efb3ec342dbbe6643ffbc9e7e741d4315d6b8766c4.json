{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let PrescriptionDetailsComponent = class PrescriptionDetailsComponent {\n  constructor(router, route, fb) {\n    this.router = router;\n    this.route = route;\n    this.fb = fb;\n  }\n  ngOnInit() {}\n  get prescriptions() {\n    return this.prescriptionForm.get('prescriptions');\n  }\n  createPrescriptionForm() {\n    return this.fb.group({\n      medicine: ['', Validators.required],\n      dosage: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      notes: ['']\n    });\n  }\n  addPrescriptionRow() {\n    this.prescriptionsArray.push(this.createPrescriptionForm());\n  }\n  removePrescriptionRow(index) {\n    this.prescriptionsArray.removeAt(index);\n  }\n  onSubmit() {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue);\n      } else {\n        this.appointmentService.createAppointment(formValue);\n      }\n      this.router.navigate(['/appointments']);\n    }\n  }\n  cancel() {\n    this.router.navigate(['/appointments']);\n  }\n  isFieldInvalid(fieldName) {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n};\nPrescriptionDetailsComponent = __decorate([Component({\n  selector: 'app-prescription-details',\n  templateUrl: './prescription-details.component.html',\n  styleUrls: ['./prescription-details.component.css']\n})], PrescriptionDetailsComponent);","map":{"version":3,"names":["Component","Validators","PrescriptionDetailsComponent","constructor","router","route","fb","ngOnInit","prescriptions","prescriptionForm","get","createPrescriptionForm","group","medicine","required","dosage","startDate","endDate","notes","addPrescriptionRow","prescriptionsArray","push","removePrescriptionRow","index","removeAt","onSubmit","appointmentForm","valid","formValue","value","isEditMode","appointmentId","appointmentService","updateAppointment","createAppointment","navigate","cancel","isFieldInvalid","fieldName","field","invalid","dirty","touched","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\prescription-details\\prescription-details.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Appointment } from '../_models/appointment';\nimport { FormArray, FormGroup, Validators } from '@angular/forms';\nimport { Prescription } from '../_models/prescription';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-prescription-details',\n  templateUrl: './prescription-details.component.html',\n  styleUrls: ['./prescription-details.component.css']\n})\nexport class PrescriptionDetailsComponent implements OnInit {\n\n  prescriptionForm!: FormGroup;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit() {\n  }\n\n\n get prescriptions(): FormArray {\n    return this.prescriptionForm.get('prescriptions') as FormArray;\n  }\n\ncreatePrescriptionForm(): FormGroup {\n    return this.fb.group({\n      medicine: ['', Validators.required],\n      dosage: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      notes: ['']\n    });\n  }\n\n  addPrescriptionRow(): void {\n    this.prescriptionsArray.push(this.createPrescriptionForm());\n  }\n\n  removePrescriptionRow(index: number): void {\n    this.prescriptionsArray.removeAt(index);\n  }\n\n  onSubmit(): void {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue);\n      } else {\n        this.appointmentService.createAppointment(formValue);\n      }\n\n      this.router.navigate(['/appointments']);\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/appointments']);\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAA+BC,UAAU,QAAQ,gBAAgB;AAS1D,WAAMC,4BAA4B,GAAlC,MAAMA,4BAA4B;EAIvCC,YACUC,MAAc,EACdC,KAAqB,EACrBC,EAAe;IAFf,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,EAAE,GAAFA,EAAE;EACR;EAEJC,QAAQA,CAAA,GACR;EAGD,IAAIC,aAAaA,CAAA;IACd,OAAO,IAAI,CAACC,gBAAgB,CAACC,GAAG,CAAC,eAAe,CAAc;EAChE;EAEFC,sBAAsBA,CAAA;IAClB,OAAO,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MACnBC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACa,QAAQ,CAAC;MACnCC,MAAM,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACa,QAAQ,CAAC;MACjCE,SAAS,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACa,QAAQ,CAAC;MACpCG,OAAO,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACa,QAAQ,CAAC;MAClCI,KAAK,EAAE,CAAC,EAAE;KACX,CAAC;EACJ;EAEAC,kBAAkBA,CAAA;IAChB,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACV,sBAAsB,EAAE,CAAC;EAC7D;EAEAW,qBAAqBA,CAACC,KAAa;IACjC,IAAI,CAACH,kBAAkB,CAACI,QAAQ,CAACD,KAAK,CAAC;EACzC;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACC,eAAe,CAACC,KAAK,EAAE;MAC9B,MAAMC,SAAS,GAAG,IAAI,CAACF,eAAe,CAACG,KAAK;MAE5C,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,aAAa,EAAE;QACzC,IAAI,CAACC,kBAAkB,CAACC,iBAAiB,CAAC,IAAI,CAACF,aAAa,EAAEH,SAAS,CAAC;OACzE,MAAM;QACL,IAAI,CAACI,kBAAkB,CAACE,iBAAiB,CAACN,SAAS,CAAC;;MAGtD,IAAI,CAACxB,MAAM,CAAC+B,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;;EAE3C;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAAChC,MAAM,CAAC+B,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;EACzC;EAEAE,cAAcA,CAACC,SAAiB;IAC9B,MAAMC,KAAK,GAAG,IAAI,CAACb,eAAe,CAAChB,GAAG,CAAC4B,SAAS,CAAC;IACjD,OAAO,CAAC,EAAEC,KAAK,IAAIA,KAAK,CAACC,OAAO,KAAKD,KAAK,CAACE,KAAK,IAAIF,KAAK,CAACG,OAAO,CAAC,CAAC;EACrE;CAED;AA3DYxC,4BAA4B,GAAAyC,UAAA,EALxC3C,SAAS,CAAC;EACT4C,QAAQ,EAAE,0BAA0B;EACpCC,WAAW,EAAE,uCAAuC;EACpDC,SAAS,EAAE,CAAC,sCAAsC;CACnD,CAAC,C,EACW5C,4BAA4B,CA2DxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}