{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AppointmentService {\n  constructor() {\n    this.appointmentsSubject = new BehaviorSubject(this.appointments);\n    this.appointments$ = this.appointmentsSubject.asObservable();\n    this.patients = ['John Doe', 'Jane Smith', 'Bob Johnson'];\n    this.doctors = ['Dr. Smith', 'Dr. Brown', 'Dr. Johnson'];\n    this.medicines = ['Paracetamol', 'Amoxicillin', 'Metformin', 'Aspirin', 'Ibuprofen', 'Omeprazole'];\n  }\n  getAppointments() {\n    return this.appointments$;\n  }\n  getAppointmentById(id) {\n    return this.appointments.find(a => a.id === id);\n  }\n  createAppointment(appointment) {\n    const newAppointment = {\n      ...appointment,\n      id: this.getNextId()\n    };\n    this.appointments.push(newAppointment);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  updateAppointment(id, appointment) {\n    const index = this.appointments.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.appointments[index] = {\n        ...appointment,\n        id\n      };\n      this.appointmentsSubject.next([...this.appointments]);\n    }\n  }\n  deleteAppointment(id) {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  getNextId() {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n  static {\n    this.ɵfac = function AppointmentService_Factory(t) {\n      return new (t || AppointmentService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppointmentService,\n      factory: AppointmentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","AppointmentService","constructor","appointmentsSubject","appointments","appointments$","asObservable","patients","doctors","medicines","getAppointments","getAppointmentById","id","find","a","createAppointment","appointment","newAppointment","getNextId","push","next","updateAppointment","index","findIndex","deleteAppointment","filter","length","Math","max","map","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\_services\\appointment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Appointment } from '../_models/appointment';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n  private appointmentsSubject = new BehaviorSubject<Appointment[]>(this.appointments);\n  public appointments$ = this.appointmentsSubject.asObservable();\n\n  patients = ['John Doe', 'Jane Smith', 'Bob Johnson'];\n  doctors = ['Dr. Smith', 'Dr. Brown', 'Dr. Johnson'];\n  medicines = ['Paracetamol', 'Amoxicillin', 'Metformin', 'Aspirin', 'Ibuprofen', 'Omeprazole'];\n\n  constructor() { }\n\n  getAppointments(): Observable<Appointment[]> {\n    return this.appointments$;\n  }\n\n  getAppointmentById(id: number): Appointment | undefined {\n    return this.appointments.find(a => a.id === id);\n  }\n\n  createAppointment(appointment: Omit<Appointment, 'id'>): void {\n    const newAppointment: Appointment = {\n      ...appointment,\n      id: this.getNextId()\n    };\n    this.appointments.push(newAppointment);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  updateAppointment(id: number, appointment: Omit<Appointment, 'id'>): void {\n    const index = this.appointments.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.appointments[index] = { ...appointment, id };\n      this.appointmentsSubject.next([...this.appointments]);\n    }\n  }\n\n  deleteAppointment(id: number): void {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  private getNextId(): number {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,kBAAkB;EAQ7BC,YAAA;IAPQ,KAAAC,mBAAmB,GAAG,IAAIH,eAAe,CAAgB,IAAI,CAACI,YAAY,CAAC;IAC5E,KAAAC,aAAa,GAAG,IAAI,CAACF,mBAAmB,CAACG,YAAY,EAAE;IAE9D,KAAAC,QAAQ,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,aAAa,CAAC;IACpD,KAAAC,OAAO,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,aAAa,CAAC;IACnD,KAAAC,SAAS,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC;EAE7E;EAEhBC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,aAAa;EAC3B;EAEAM,kBAAkBA,CAACC,EAAU;IAC3B,OAAO,IAAI,CAACR,YAAY,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EACjD;EAEAG,iBAAiBA,CAACC,WAAoC;IACpD,MAAMC,cAAc,GAAgB;MAClC,GAAGD,WAAW;MACdJ,EAAE,EAAE,IAAI,CAACM,SAAS;KACnB;IACD,IAAI,CAACd,YAAY,CAACe,IAAI,CAACF,cAAc,CAAC;IACtC,IAAI,CAACd,mBAAmB,CAACiB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAC,CAAC;EACvD;EAEAiB,iBAAiBA,CAACT,EAAU,EAAEI,WAAoC;IAChE,MAAMM,KAAK,GAAG,IAAI,CAAClB,YAAY,CAACmB,SAAS,CAACT,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC3D,IAAIU,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAAClB,YAAY,CAACkB,KAAK,CAAC,GAAG;QAAE,GAAGN,WAAW;QAAEJ;MAAE,CAAE;MACjD,IAAI,CAACT,mBAAmB,CAACiB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAC,CAAC;;EAEzD;EAEAoB,iBAAiBA,CAACZ,EAAU;IAC1B,IAAI,CAACR,YAAY,GAAG,IAAI,CAACA,YAAY,CAACqB,MAAM,CAACX,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC9D,IAAI,CAACT,mBAAmB,CAACiB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAC,CAAC;EACvD;EAEQc,SAASA,CAAA;IACf,OAAO,IAAI,CAACd,YAAY,CAACsB,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACxB,YAAY,CAACyB,GAAG,CAACf,CAAC,IAAIA,CAAC,CAACF,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EAC7F;;;uBA1CWX,kBAAkB;IAAA;EAAA;;;aAAlBA,kBAAkB;MAAA6B,OAAA,EAAlB7B,kBAAkB,CAAA8B,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}