{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppointmentService {\n  // private selectedAppointment!: AppointmentDTO;\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //------------\n    this.appointmentsSubject = new BehaviorSubject(this.appointments);\n    this.appointments$ = this.appointmentsSubject.asObservable();\n    this.patients = ['John Doe', 'Jane Smith', 'Bob Johnson'];\n    this.doctors = ['Dr. Smith', 'Dr. Brown', 'Dr. Johnson'];\n    this.medicines = ['Paracetamol', 'Amoxicillin', 'Metformin', 'Aspirin', 'Ibuprofen', 'Omeprazole'];\n    this.url = `${environment.apiUrl}/appointments`;\n  }\n  // setAppointment(appointment: AppointmentDTO) {\n  //   this.selectedAppointment = appointment;\n  // }\n  // getAppointment(): AppointmentDTO {\n  //   return this.selectedAppointment;\n  // }\n  createAppointment(appointmentDTO) {\n    return this.httpClient.post(this.url, appointmentDTO, {\n      responseType: 'json'\n    });\n  }\n  updateAppointment(id, appointmentDTO) {\n    let fullUrl = this.url + `/${id}`;\n    return this.httpClient.put(fullUrl, appointmentDTO, {\n      responseType: 'json'\n    });\n  }\n  deleteAppointment(id) {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  getAppointments() {\n    return this.appointments$;\n  }\n  // getAppointmentById(id: number) {\n  //   let fullUrl = `${this.url}/${id}}`;\n  //   return this.httpClient.get<AppointmentDTO>(fullUrl, { responseType: 'json' })\n  //     .pipe(map(\n  //       (data) => {\n  //         return data;\n  //       }\n  //     ));\n  // }\n  getAppointmentById(id) {\n    const fullUrl = `${this.url}/${id}`;\n    return this.httpClient.get(fullUrl);\n  }\n  //--\n  getNextId() {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n  static {\n    this.ɵfac = function AppointmentService_Factory(t) {\n      return new (t || AppointmentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppointmentService,\n      factory: AppointmentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","environment","AppointmentService","constructor","httpClient","appointmentsSubject","appointments","appointments$","asObservable","patients","doctors","medicines","url","apiUrl","createAppointment","appointmentDTO","post","responseType","updateAppointment","id","fullUrl","put","deleteAppointment","filter","a","next","getAppointments","getAppointmentById","get","getNextId","length","Math","max","map","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\_services\\appointment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AppointmentDTO } from '../_models/appointmentDTO';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { DoctorDTO } from '../_models/doctorDTO';\nimport { PatientDTO } from '../_models/patientDTO';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n  private url!: string;\n  // private selectedAppointment!: AppointmentDTO;\n\n  constructor(private httpClient: HttpClient) {\n    this.url = `${environment.apiUrl}/appointments`;\n  }\n\n  // setAppointment(appointment: AppointmentDTO) {\n  //   this.selectedAppointment = appointment;\n  // }\n\n  // getAppointment(): AppointmentDTO {\n  //   return this.selectedAppointment;\n  // }\n\n\n  createAppointment(appointmentDTO: AppointmentDTO) {\n      return this.httpClient.post<AppointmentDTO>(this.url, appointmentDTO, { responseType: 'json' });\n  }\n\n  updateAppointment(id: number, appointmentDTO: AppointmentDTO) {\n      let fullUrl = this.url + `/${id}`;\n      return this.httpClient.put<AppointmentDTO>(fullUrl, appointmentDTO, { responseType: 'json' });\n  }\n\n  deleteAppointment(id: number): void {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  //------------\n\n\n  private appointmentsSubject = new BehaviorSubject<AppointmentDTO[]>(this.appointments);\n  public appointments$ = this.appointmentsSubject.asObservable();\n\n  patients = ['John Doe', 'Jane Smith', 'Bob Johnson'];\n  doctors = ['Dr. Smith', 'Dr. Brown', 'Dr. Johnson'];\n  medicines = ['Paracetamol', 'Amoxicillin', 'Metformin', 'Aspirin', 'Ibuprofen', 'Omeprazole'];\n\n\n  getAppointments(): Observable<AppointmentDTO[]> {\n    return this.appointments$;\n  }\n\n  // getAppointmentById(id: number) {\n  //   let fullUrl = `${this.url}/${id}}`;\n  //   return this.httpClient.get<AppointmentDTO>(fullUrl, { responseType: 'json' })\n  //     .pipe(map(\n  //       (data) => {\n  //         return data;\n  //       }\n  //     ));\n  // }\n\n  getAppointmentById(id: number): Observable<AppointmentDTO> {\n    const fullUrl = `${this.url}/${id}`;\n    return this.httpClient.get<AppointmentDTO>(fullUrl);\n  }\n\n//--\n\n\n  private getNextId(): number {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,QAAyB,MAAM;AAIvD,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,kBAAkB;EAG7B;EAEAC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IA2B9B;IAGQ,KAAAC,mBAAmB,GAAG,IAAIL,eAAe,CAAmB,IAAI,CAACM,YAAY,CAAC;IAC/E,KAAAC,aAAa,GAAG,IAAI,CAACF,mBAAmB,CAACG,YAAY,EAAE;IAE9D,KAAAC,QAAQ,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,aAAa,CAAC;IACpD,KAAAC,OAAO,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,aAAa,CAAC;IACnD,KAAAC,SAAS,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC;IAlC3F,IAAI,CAACC,GAAG,GAAG,GAAGX,WAAW,CAACY,MAAM,eAAe;EACjD;EAEA;EACA;EACA;EAEA;EACA;EACA;EAGAC,iBAAiBA,CAACC,cAA8B;IAC5C,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAiB,IAAI,CAACJ,GAAG,EAAEG,cAAc,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EACnG;EAEAC,iBAAiBA,CAACC,EAAU,EAAEJ,cAA8B;IACxD,IAAIK,OAAO,GAAG,IAAI,CAACR,GAAG,GAAG,IAAIO,EAAE,EAAE;IACjC,OAAO,IAAI,CAACf,UAAU,CAACiB,GAAG,CAAiBD,OAAO,EAAEL,cAAc,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EACjG;EAEAK,iBAAiBA,CAACH,EAAU;IAC1B,IAAI,CAACb,YAAY,GAAG,IAAI,CAACA,YAAY,CAACiB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;IAC9D,IAAI,CAACd,mBAAmB,CAACoB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACnB,YAAY,CAAC,CAAC;EACvD;EAaAoB,eAAeA,CAAA;IACb,OAAO,IAAI,CAACnB,aAAa;EAC3B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAoB,kBAAkBA,CAACR,EAAU;IAC3B,MAAMC,OAAO,GAAG,GAAG,IAAI,CAACR,GAAG,IAAIO,EAAE,EAAE;IACnC,OAAO,IAAI,CAACf,UAAU,CAACwB,GAAG,CAAiBR,OAAO,CAAC;EACrD;EAEF;EAGUS,SAASA,CAAA;IACf,OAAO,IAAI,CAACvB,YAAY,CAACwB,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAAC1B,YAAY,CAAC2B,GAAG,CAACT,CAAC,IAAIA,CAAC,CAACL,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EAC7F;;;uBAnEWjB,kBAAkB,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlBnC,kBAAkB;MAAAoC,OAAA,EAAlBpC,kBAAkB,CAAAqC,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}