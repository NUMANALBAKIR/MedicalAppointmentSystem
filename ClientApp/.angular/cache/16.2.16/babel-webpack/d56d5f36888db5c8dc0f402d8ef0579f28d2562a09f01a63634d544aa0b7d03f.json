{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PrescriptionDetailsComponent = class PrescriptionDetailsComponent {\n  constructor(router, route) {\n    this.router = router;\n    this.route = route;\n  }\n  ngOnInit() {}\n  get prescriptionsArray() {\n    return this.appointmentForm.get('prescriptions');\n  }\n  createPrescriptionForm(prescription) {\n    return this.fb.group({\n      medicine: [prescription?.medicine || ''],\n      dosage: [prescription?.dosage || ''],\n      startDate: [prescription?.startDate || ''],\n      endDate: [prescription?.endDate || ''],\n      notes: [prescription?.notes || '']\n    });\n  }\n  addPrescriptionRow() {\n    this.prescriptionsArray.push(this.createPrescriptionForm());\n  }\n  removePrescriptionRow(index) {\n    this.prescriptionsArray.removeAt(index);\n  }\n  onSubmit() {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue);\n      } else {\n        this.appointmentService.createAppointment(formValue);\n      }\n      this.router.navigate(['/appointments']);\n    }\n  }\n  cancel() {\n    this.router.navigate(['/appointments']);\n  }\n  isFieldInvalid(fieldName) {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n};\nPrescriptionDetailsComponent = __decorate([Component({\n  selector: 'app-prescription-details',\n  templateUrl: './prescription-details.component.html',\n  styleUrls: ['./prescription-details.component.css']\n})], PrescriptionDetailsComponent);","map":{"version":3,"names":["Component","PrescriptionDetailsComponent","constructor","router","route","ngOnInit","prescriptionsArray","appointmentForm","get","createPrescriptionForm","prescription","fb","group","medicine","dosage","startDate","endDate","notes","addPrescriptionRow","push","removePrescriptionRow","index","removeAt","onSubmit","valid","formValue","value","isEditMode","appointmentId","appointmentService","updateAppointment","createAppointment","navigate","cancel","isFieldInvalid","fieldName","field","invalid","dirty","touched","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\prescription-details\\prescription-details.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Appointment } from '../_models/appointment';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Prescription } from '../_models/prescription';\n\n@Component({\n  selector: 'app-prescription-details',\n  templateUrl: './prescription-details.component.html',\n  styleUrls: ['./prescription-details.component.css']\n})\nexport class PrescriptionDetailsComponent implements OnInit {\n\n  prescriptionForm!: FormGroup;\n\n  constructor(\n        private router: Router,\n        private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n  }\n\n\n  get prescriptionsArray(): FormArray {\n    return this.appointmentForm.get('prescriptions') as FormArray;\n  }\n\n  createPrescriptionForm(prescription?: Prescription): FormGroup {\n    return this.fb.group({\n      medicine: [prescription?.medicine || ''],\n      dosage: [prescription?.dosage || ''],\n      startDate: [prescription?.startDate || ''],\n      endDate: [prescription?.endDate || ''],\n      notes: [prescription?.notes || '']\n    });\n  }\n\n  addPrescriptionRow(): void {\n    this.prescriptionsArray.push(this.createPrescriptionForm());\n  }\n\n  removePrescriptionRow(index: number): void {\n    this.prescriptionsArray.removeAt(index);\n  }\n\n  onSubmit(): void {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue);\n      } else {\n        this.appointmentService.createAppointment(formValue);\n      }\n\n      this.router.navigate(['/appointments']);\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/appointments']);\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,4BAA4B,GAAlC,MAAMA,4BAA4B;EAIvCC,YACcC,MAAc,EACdC,KAAqB;IADrB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACf;EAEJC,QAAQA,CAAA,GACR;EAGA,IAAIC,kBAAkBA,CAAA;IACpB,OAAO,IAAI,CAACC,eAAe,CAACC,GAAG,CAAC,eAAe,CAAc;EAC/D;EAEAC,sBAAsBA,CAACC,YAA2B;IAChD,OAAO,IAAI,CAACC,EAAE,CAACC,KAAK,CAAC;MACnBC,QAAQ,EAAE,CAACH,YAAY,EAAEG,QAAQ,IAAI,EAAE,CAAC;MACxCC,MAAM,EAAE,CAACJ,YAAY,EAAEI,MAAM,IAAI,EAAE,CAAC;MACpCC,SAAS,EAAE,CAACL,YAAY,EAAEK,SAAS,IAAI,EAAE,CAAC;MAC1CC,OAAO,EAAE,CAACN,YAAY,EAAEM,OAAO,IAAI,EAAE,CAAC;MACtCC,KAAK,EAAE,CAACP,YAAY,EAAEO,KAAK,IAAI,EAAE;KAClC,CAAC;EACJ;EAEAC,kBAAkBA,CAAA;IAChB,IAAI,CAACZ,kBAAkB,CAACa,IAAI,CAAC,IAAI,CAACV,sBAAsB,EAAE,CAAC;EAC7D;EAEAW,qBAAqBA,CAACC,KAAa;IACjC,IAAI,CAACf,kBAAkB,CAACgB,QAAQ,CAACD,KAAK,CAAC;EACzC;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAAChB,eAAe,CAACiB,KAAK,EAAE;MAC9B,MAAMC,SAAS,GAAG,IAAI,CAAClB,eAAe,CAACmB,KAAK;MAE5C,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,aAAa,EAAE;QACzC,IAAI,CAACC,kBAAkB,CAACC,iBAAiB,CAAC,IAAI,CAACF,aAAa,EAAEH,SAAS,CAAC;OACzE,MAAM;QACL,IAAI,CAACI,kBAAkB,CAACE,iBAAiB,CAACN,SAAS,CAAC;;MAGtD,IAAI,CAACtB,MAAM,CAAC6B,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;;EAE3C;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAAC9B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;EACzC;EAEAE,cAAcA,CAACC,SAAiB;IAC9B,MAAMC,KAAK,GAAG,IAAI,CAAC7B,eAAe,CAACC,GAAG,CAAC2B,SAAS,CAAC;IACjD,OAAO,CAAC,EAAEC,KAAK,IAAIA,KAAK,CAACC,OAAO,KAAKD,KAAK,CAACE,KAAK,IAAIF,KAAK,CAACG,OAAO,CAAC,CAAC;EACrE;CAED;AA1DYtC,4BAA4B,GAAAuC,UAAA,EALxCxC,SAAS,CAAC;EACTyC,QAAQ,EAAE,0BAA0B;EACpCC,WAAW,EAAE,uCAAuC;EACpDC,SAAS,EAAE,CAAC,sCAAsC;CACnD,CAAC,C,EACW1C,4BAA4B,CA0DxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}