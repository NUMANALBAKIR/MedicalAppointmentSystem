{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppointmentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = `${environment.apiUrl}/Appointment`;\n  }\n  getAllDoctor() {\n    return this.httpClient.get(this.url, {\n      responseType: 'json'\n    });\n  }\n  getAllPatient() {\n    return this.httpClient.get(this.url, {\n      responseType: 'json'\n    });\n  }\n  //----------\n  getAppointments() {\n    return this.appointments$;\n  }\n  getAppointmentById(id) {\n    return this.appointments.find(a => a.id === id);\n  }\n  createAppointment(appointment) {\n    const newAppointment = {\n      ...appointment,\n      id: this.getNextId()\n    };\n    this.appointments.push(newAppointment);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  updateAppointment(id, appointment) {\n    const index = this.appointments.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.appointments[index] = {\n        ...appointment,\n        id\n      };\n      this.appointmentsSubject.next([...this.appointments]);\n    }\n  }\n  deleteAppointment(id) {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n  getNextId() {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n  static {\n    this.ɵfac = function AppointmentService_Factory(t) {\n      return new (t || AppointmentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppointmentService,\n      factory: AppointmentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","AppointmentService","constructor","httpClient","url","apiUrl","getAllDoctor","get","responseType","getAllPatient","getAppointments","appointments$","getAppointmentById","id","appointments","find","a","createAppointment","appointment","newAppointment","getNextId","push","appointmentsSubject","next","updateAppointment","index","findIndex","deleteAppointment","filter","length","Math","max","map","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\_services\\appointment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Appointment } from '../_models/appointment';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Patient } from '../_models/Patient';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n  private url!: string;\n\n  constructor(private httpClient: HttpClient) {\n    this.url = `${environment.apiUrl}/Appointment`;\n  }\n\n\n    getAllDoctor(): Observable<Doctor[]>\n    {\n      return this.httpClient.get<Doctor[]>(this.url, { responseType: 'json' });\n    }\n\n    getAllPatient(): Observable<Patient[]>\n    {\n      return this.httpClient.get<Patient[]>(this.url, { responseType: 'json' });\n    }\n\n\n\n  //----------\n\n  getAppointments(): Observable<Appointment[]> {\n    return this.appointments$;\n  }\n\n  getAppointmentById(id: number): Appointment | undefined {\n    return this.appointments.find(a => a.id === id);\n  }\n\n  createAppointment(appointment: Omit<Appointment, 'id'>): void {\n    const newAppointment: Appointment = {\n      ...appointment,\n      id: this.getNextId()\n    };\n    this.appointments.push(newAppointment);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  updateAppointment(id: number, appointment: Omit<Appointment, 'id'>): void {\n    const index = this.appointments.findIndex(a => a.id === id);\n    if (index !== -1) {\n      this.appointments[index] = { ...appointment, id };\n      this.appointmentsSubject.next([...this.appointments]);\n    }\n  }\n\n  deleteAppointment(id: number): void {\n    this.appointments = this.appointments.filter(a => a.id !== id);\n    this.appointmentsSubject.next([...this.appointments]);\n  }\n\n  private getNextId(): number {\n    return this.appointments.length > 0 ? Math.max(...this.appointments.map(a => a.id)) + 1 : 1;\n  }\n}"],"mappings":"AAIA,SAASA,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAC5B,IAAI,CAACC,GAAG,GAAG,GAAGJ,WAAW,CAACK,MAAM,cAAc;EAChD;EAGEC,YAAYA,CAAA;IAEV,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAAW,IAAI,CAACH,GAAG,EAAE;MAAEI,YAAY,EAAE;IAAM,CAAE,CAAC;EAC1E;EAEAC,aAAaA,CAAA;IAEX,OAAO,IAAI,CAACN,UAAU,CAACI,GAAG,CAAY,IAAI,CAACH,GAAG,EAAE;MAAEI,YAAY,EAAE;IAAM,CAAE,CAAC;EAC3E;EAIF;EAEAE,eAAeA,CAAA;IACb,OAAO,IAAI,CAACC,aAAa;EAC3B;EAEAC,kBAAkBA,CAACC,EAAU;IAC3B,OAAO,IAAI,CAACC,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;EACjD;EAEAI,iBAAiBA,CAACC,WAAoC;IACpD,MAAMC,cAAc,GAAgB;MAClC,GAAGD,WAAW;MACdL,EAAE,EAAE,IAAI,CAACO,SAAS;KACnB;IACD,IAAI,CAACN,YAAY,CAACO,IAAI,CAACF,cAAc,CAAC;IACtC,IAAI,CAACG,mBAAmB,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACT,YAAY,CAAC,CAAC;EACvD;EAEAU,iBAAiBA,CAACX,EAAU,EAAEK,WAAoC;IAChE,MAAMO,KAAK,GAAG,IAAI,CAACX,YAAY,CAACY,SAAS,CAACV,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC3D,IAAIY,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACX,YAAY,CAACW,KAAK,CAAC,GAAG;QAAE,GAAGP,WAAW;QAAEL;MAAE,CAAE;MACjD,IAAI,CAACS,mBAAmB,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACT,YAAY,CAAC,CAAC;;EAEzD;EAEAa,iBAAiBA,CAACd,EAAU;IAC1B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACc,MAAM,CAACZ,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC9D,IAAI,CAACS,mBAAmB,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACT,YAAY,CAAC,CAAC;EACvD;EAEQM,SAASA,CAAA;IACf,OAAO,IAAI,CAACN,YAAY,CAACe,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACjB,YAAY,CAACkB,GAAG,CAAChB,CAAC,IAAIA,CAAC,CAACH,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EAC7F;;;uBAtDWZ,kBAAkB,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlBnC,kBAAkB;MAAAoC,OAAA,EAAlBpC,kBAAkB,CAAAqC,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}