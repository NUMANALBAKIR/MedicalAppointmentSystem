{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../_services/appointment.service\";\nimport * as i3 from \"../_services/data.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction AppointmentFormComponent_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const patient_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", patient_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", patient_r8.name, \" \");\n  }\n}\nfunction AppointmentFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1, \" Please select a patient. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppointmentFormComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", doctor_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", doctor_r9.name, \" \");\n  }\n}\nfunction AppointmentFormComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1, \" Please select a doctor. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppointmentFormComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1, \" Please select a date. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppointmentFormComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtext(1, \" Please select a visit type. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppointmentFormComponent_div_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtext(1, \" Please select a visit type. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppointmentFormComponent_div_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtext(1, \" Please select a visit type. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AppointmentFormComponent {\n  constructor(fb, appointmentService, dataService, router, route) {\n    this.fb = fb;\n    this.appointmentService = appointmentService;\n    this.dataService = dataService;\n    this.router = router;\n    this.route = route;\n    this.isEditMode = false;\n    this.appointmentId = null;\n    this.appointmentForm = this.createForm();\n  }\n  ngOnInit() {\n    this.allDoctors = this.dataService.getDoctors();\n    this.allPatients = this.dataService.getPatients();\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.appointmentId = Number(params['id']);\n        this.loadAppointment(this.appointmentId);\n      }\n    });\n  }\n  createForm() {\n    return this.fb.group({\n      id: [0],\n      patientId: ['', Validators.required],\n      patientName: ['', Validators.required],\n      doctorId: ['', Validators.required],\n      appointmentDate: ['', Validators.required],\n      visitType: ['', Validators.required],\n      notes: [''],\n      diagnosis: ['']\n    });\n  }\n  // get prescriptionsArray(): FormArray {\n  //   return this.appointmentForm.get('prescriptions') as FormArray;\n  // }\n  // createPrescriptionForm(prescription?: Prescription): FormGroup {\n  //   return this.fb.group({\n  //     medicine: [prescription?.medicine || ''],\n  //     dosage: [prescription?.dosage || ''],\n  //     startDate: [prescription?.startDate || ''],\n  //     endDate: [prescription?.endDate || ''],\n  //     notes: [prescription?.notes || '']\n  //   });\n  // }\n  // addPrescriptionRow(): void {\n  //   this.prescriptionsArray.push(this.createPrescriptionForm());\n  // }\n  // removePrescriptionRow(index: number): void {\n  //   this.prescriptionsArray.removeAt(index);\n  // }\n  loadAppointment(id) {\n    this.appointmentService.getAppointmentById(id).subscribe(appointment => {\n      if (appointment) {\n        this.appointmentForm.patchValue({\n          id: appointment.id,\n          patientId: appointment.patientId,\n          patientName: appointment.patientName,\n          doctorId: appointment.doctorId,\n          doctorName: appointment.doctorName,\n          appointmentDate: appointment.appointmentDate.split('T')[0],\n          visitType: appointment.visitType,\n          notes: appointment.notes,\n          diagnosis: appointment.diagnosis\n        });\n      }\n    }, e => {\n      console.log('Error: ' + e);\n    });\n    // Load prescriptions\n    // appointment.prescriptions.forEach(prescription => {\n    //   this.prescriptionsArray.push(this.createPrescriptionForm(prescription));\n    // });\n  }\n\n  onSubmit() {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue).subscribe(r => {\n          this.router.navigate(['/appointment-list']);\n        }, e => {\n          console.log(e);\n        });\n      } else {\n        this.appointmentService.createAppointment(formValue).subscribe(r => {\n          this.router.navigate(['/appointment-list']);\n        }, e => {\n          console.log(e);\n        });\n      }\n    }\n  }\n  cancel() {\n    this.router.navigate(['/appointment-list']);\n  }\n  isFieldInvalid(fieldName) {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n  static {\n    this.ɵfac = function AppointmentFormComponent_Factory(t) {\n      return new (t || AppointmentFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AppointmentService), i0.ɵɵdirectiveInject(i3.DataService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppointmentFormComponent,\n      selectors: [[\"app-appointment-form\"]],\n      decls: 73,\n      vars: 28,\n      consts: [[1, \"row\", \"mt-4\", \"justify-content-center\"], [1, \"col-lg-8\"], [1, \"card\"], [1, \"card-header\"], [1, \"mb-0\"], [1, \"bi\", \"bi-plus-circle\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"mb-3\"], [1, \"col-md-6\"], [1, \"form-label\"], [\"formControlName\", \"patientId\", 1, \"form-select\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"formControlName\", \"doctorId\", 1, \"form-select\"], [\"type\", \"date\", \"formControlName\", \"appointmentDate\", 1, \"form-control\"], [1, \"mt-2\"], [1, \"form-check\", \"form-check-inline\", \"visit-type-radio\"], [\"type\", \"radio\", \"formControlName\", \"visitType\", \"id\", \"firstVisit\", \"value\", \"First Visit\", 1, \"form-check-input\"], [\"for\", \"firstVisit\", 1, \"form-check-label\"], [\"type\", \"radio\", \"formControlName\", \"visitType\", \"id\", \"followUp\", \"value\", \"Follow-up\", 1, \"form-check-input\"], [\"for\", \"followUp\", 1, \"form-check-label\"], [\"class\", \"text-danger small\", 4, \"ngIf\"], [\"formControlName\", \"notes\", \"placeholder\", \"Enter appointment notes\", 1, \"form-control\"], [\"formControlName\", \"diagnosis\", \"rows\", \"3\", \"placeholder\", \"Enter diagnosis\", 1, \"form-control\"], [1, \"d-flex\", \"justify-content-end\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"me-2\", 3, \"click\"], [1, \"bi\", \"bi-x-circle\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"bi\", \"bi-check-circle\"], [3, \"value\"], [1, \"invalid-feedback\"], [1, \"text-danger\", \"small\"]],\n      template: function AppointmentFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h5\", 4);\n          i0.ɵɵelement(5, \"i\", 5);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7);\n          i0.ɵɵlistener(\"ngSubmit\", function AppointmentFormComponent_Template_form_ngSubmit_8_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(9, \"div\", 8)(10, \"div\", 9)(11, \"label\", 10);\n          i0.ɵɵtext(12, \"Patient *\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"select\", 11)(14, \"option\", 12);\n          i0.ɵɵtext(15, \"Select Patient\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(16, AppointmentFormComponent_option_16_Template, 2, 2, \"option\", 13);\n          i0.ɵɵpipe(17, \"async\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, AppointmentFormComponent_div_18_Template, 2, 0, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 9)(20, \"label\", 10);\n          i0.ɵɵtext(21, \"Doctor *\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"select\", 15)(23, \"option\", 12);\n          i0.ɵɵtext(24, \"Select Doctor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(25, AppointmentFormComponent_option_25_Template, 2, 2, \"option\", 13);\n          i0.ɵɵpipe(26, \"async\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(27, AppointmentFormComponent_div_27_Template, 2, 0, \"div\", 14);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 8)(29, \"div\", 9)(30, \"label\", 10);\n          i0.ɵɵtext(31, \"Appointment Date *\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(32, \"input\", 16);\n          i0.ɵɵtemplate(33, AppointmentFormComponent_div_33_Template, 2, 0, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"div\", 9)(35, \"label\", 10);\n          i0.ɵɵtext(36, \"Visit Type *\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"div\", 17)(38, \"div\", 18);\n          i0.ɵɵelement(39, \"input\", 19);\n          i0.ɵɵelementStart(40, \"label\", 20);\n          i0.ɵɵtext(41, \"First Visit\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(42, \"div\", 18);\n          i0.ɵɵelement(43, \"input\", 21);\n          i0.ɵɵelementStart(44, \"label\", 22);\n          i0.ɵɵtext(45, \"Follow-up\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(46, AppointmentFormComponent_div_46_Template, 2, 0, \"div\", 23);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(47, \"div\", 8)(48, \"div\", 9)(49, \"label\", 10);\n          i0.ɵɵtext(50, \"Notes\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(51, \"input\", 24);\n          i0.ɵɵtemplate(52, AppointmentFormComponent_div_52_Template, 2, 0, \"div\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"div\", 9)(54, \"label\", 10);\n          i0.ɵɵtext(55, \"Diagnosis\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(56, \"textarea\", 25);\n          i0.ɵɵtemplate(57, AppointmentFormComponent_div_57_Template, 2, 0, \"div\", 23);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(58, \"div\", 26)(59, \"button\", 27);\n          i0.ɵɵlistener(\"click\", function AppointmentFormComponent_Template_button_click_59_listener() {\n            return ctx.cancel();\n          });\n          i0.ɵɵelement(60, \"i\", 28);\n          i0.ɵɵtext(61, \" Cancel \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(62, \"button\", 29);\n          i0.ɵɵelement(63, \"i\", 30);\n          i0.ɵɵtext(64, \" Save Appointment \");\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(65, \"pre\");\n          i0.ɵɵtext(66);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(67, \"pre\");\n          i0.ɵɵtext(68);\n          i0.ɵɵpipe(69, \"json\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(70, \"pre\");\n          i0.ɵɵtext(71);\n          i0.ɵɵpipe(72, \"json\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Edit Appointment\" : \"Add New Appointment\", \" \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.appointmentForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵclassProp(\"is-invalid\", ctx.isFieldInvalid(\"patientId\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 20, ctx.allPatients));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isFieldInvalid(\"patientId\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"is-invalid\", ctx.isFieldInvalid(\"doctorId\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(26, 22, ctx.allDoctors));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isFieldInvalid(\"doctorId\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵclassProp(\"is-invalid\", ctx.isFieldInvalid(\"appointmentDate\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isFieldInvalid(\"appointmentDate\"));\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngIf\", ctx.isFieldInvalid(\"visitType\"));\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.isFieldInvalid(\"notes\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.isFieldInvalid(\"diagnosis\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"disabled\", ctx.appointmentForm.invalid);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.appointmentForm.status);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(69, 24, ctx.appointmentForm.errors));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(72, 26, ctx.appointmentForm.value));\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.AsyncPipe, i5.JsonPipe],\n      styles: [\".visit-type-radio[_ngcontent-%COMP%] {\\n    margin: 0 10px;\\n}\\n\\n.prescription-grid[_ngcontent-%COMP%] {\\n    max-height: 300px;\\n    overflow-y: auto;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwb2ludG1lbnQtZm9ybS9hcHBvaW50bWVudC1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLHdDQUF3QztBQUM1QyIsInNvdXJjZXNDb250ZW50IjpbIi52aXNpdC10eXBlLXJhZGlvIHtcclxuICAgIG1hcmdpbjogMCAxMHB4O1xyXG59XHJcblxyXG4ucHJlc2NyaXB0aW9uLWdyaWQge1xyXG4gICAgbWF4LWhlaWdodDogMzAwcHg7XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","patient_r8","id","ɵɵadvance","ɵɵtextInterpolate1","name","doctor_r9","AppointmentFormComponent","constructor","fb","appointmentService","dataService","router","route","isEditMode","appointmentId","appointmentForm","createForm","ngOnInit","allDoctors","getDoctors","allPatients","getPatients","params","subscribe","Number","loadAppointment","group","patientId","required","patientName","doctorId","appointmentDate","visitType","notes","diagnosis","getAppointmentById","appointment","patchValue","doctorName","split","e","console","log","onSubmit","valid","formValue","value","updateAppointment","r","navigate","createAppointment","cancel","isFieldInvalid","fieldName","field","get","invalid","dirty","touched","ɵɵdirectiveInject","i1","FormBuilder","i2","AppointmentService","i3","DataService","i4","Router","ActivatedRoute","selectors","decls","vars","consts","template","AppointmentFormComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","AppointmentFormComponent_Template_form_ngSubmit_8_listener","ɵɵtemplate","AppointmentFormComponent_option_16_Template","AppointmentFormComponent_div_18_Template","AppointmentFormComponent_option_25_Template","AppointmentFormComponent_div_27_Template","AppointmentFormComponent_div_33_Template","AppointmentFormComponent_div_46_Template","AppointmentFormComponent_div_52_Template","AppointmentFormComponent_div_57_Template","AppointmentFormComponent_Template_button_click_59_listener","ɵɵclassProp","ɵɵpipeBind1","ɵɵtextInterpolate","status","errors"],"sources":["C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\appointment-form\\appointment-form.component.ts","C:\\Users\\Numan Al Bakir\\source\\repos\\MedicalAppointmentSystem\\ClientApp\\src\\app\\appointment-form\\appointment-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AppointmentService } from '../_services/appointment.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { PatientDTO } from '../_models/patientDTO';\nimport { DoctorDTO } from '../_models/doctorDTO';\nimport { DataService } from '../_services/data.service';\nimport { AppointmentDTO } from '../_models/appointmentDTO';\n\n@Component({\n  selector: 'app-appointment-form',\n  templateUrl: './appointment-form.component.html',\n  styleUrls: ['./appointment-form.component.css']\n})\nexport class AppointmentFormComponent implements OnInit {\n  appointmentForm: FormGroup;\n  isEditMode = false;\n  appointmentId: number | null = null;\n  public allPatients!: Observable<PatientDTO[]>;\n  public allDoctors!: Observable<DoctorDTO[]>;\n\n  constructor(\n    private fb: FormBuilder,\n    public appointmentService: AppointmentService,\n    public dataService: DataService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.appointmentForm = this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.allDoctors = this.dataService.getDoctors();\n    this.allPatients = this.dataService.getPatients();\n\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.appointmentId = Number(params['id']);\n        this.loadAppointment(this.appointmentId);\n      }\n    });\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      id: [0],\n      patientId: ['', Validators.required],\n      patientName: ['', Validators.required],\n      doctorId: ['', Validators.required],\n      appointmentDate: ['', Validators.required],\n      visitType: ['', Validators.required],\n      notes: [''],\n      diagnosis: ['']\n    });\n  }\n\n  // get prescriptionsArray(): FormArray {\n  //   return this.appointmentForm.get('prescriptions') as FormArray;\n  // }\n\n  // createPrescriptionForm(prescription?: Prescription): FormGroup {\n  //   return this.fb.group({\n  //     medicine: [prescription?.medicine || ''],\n  //     dosage: [prescription?.dosage || ''],\n  //     startDate: [prescription?.startDate || ''],\n  //     endDate: [prescription?.endDate || ''],\n  //     notes: [prescription?.notes || '']\n  //   });\n  // }\n\n  // addPrescriptionRow(): void {\n  //   this.prescriptionsArray.push(this.createPrescriptionForm());\n  // }\n\n  // removePrescriptionRow(index: number): void {\n  //   this.prescriptionsArray.removeAt(index);\n  // }\n\n  loadAppointment(id: number): void {\n    this.appointmentService.getAppointmentById(id).subscribe(\n      (appointment: AppointmentDTO) => {\n        if (appointment) {\n          this.appointmentForm.patchValue({\n            id: appointment.id,\n            patientId: appointment.patientId,\n            patientName: appointment.patientName,\n            doctorId: appointment.doctorId,\n            doctorName: appointment.doctorName,\n            appointmentDate: appointment.appointmentDate.split('T')[0],\n            visitType: appointment.visitType,\n            notes: appointment.notes,\n            diagnosis: appointment.diagnosis\n          });\n        }\n      },\n      (e) => {\n        console.log('Error: ' + e);\n      }\n    );\n\n      // Load prescriptions\n      // appointment.prescriptions.forEach(prescription => {\n      //   this.prescriptionsArray.push(this.createPrescriptionForm(prescription));\n      // });\n    }\n\n  onSubmit(): void {\n    if (this.appointmentForm.valid) {\n      const formValue = this.appointmentForm.value;\n\n      if (this.isEditMode && this.appointmentId) {\n        this.appointmentService.updateAppointment(this.appointmentId, formValue).subscribe(\n          (r) => {\n            this.router.navigate(['/appointment-list']);\n          },\n          (e) => {\n            console.log(e);\n          }\n        )\n      }\n      else {\n        this.appointmentService.createAppointment(formValue).subscribe(\n          (r) => {\n            this.router.navigate(['/appointment-list']);\n          },\n          (e) => {\n            console.log(e);\n          }\n        )\n      }\n\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/appointment-list']);\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.appointmentForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n}\n","<div class=\"row mt-4 justify-content-center\">\n  <div class=\"col-lg-8\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5 class=\"mb-0\">\n          <i class=\"bi bi-plus-circle\"></i>\n          {{ isEditMode ? 'Edit Appointment' : 'Add New Appointment' }}\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"appointmentForm\" (ngSubmit)=\"onSubmit()\">\n          <!-- Master Form Fields -->\n          <div class=\"row mb-3\">\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Patient *</label>\n              <select class=\"form-select\" formControlName=\"patientId\" [class.is-invalid]=\"isFieldInvalid('patientId')\">\n                <option value=\"\">Select Patient</option>\n                <option *ngFor=\"let patient of allPatients | async \" [value]=\"patient.id\">\n                  {{ patient.name }}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"isFieldInvalid('patientId')\">\n                Please select a patient.\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Doctor *</label>\n              <select class=\"form-select\" formControlName=\"doctorId\" [class.is-invalid]=\"isFieldInvalid('doctorId')\">\n                <option value=\"\">Select Doctor</option>\n                <option *ngFor=\"let doctor of allDoctors | async \" [value]=\"doctor.id\">\n                  {{ doctor.name }}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"isFieldInvalid('doctorId')\">\n                Please select a doctor.\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row mb-3\">\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Appointment Date *</label>\n              <input type=\"date\" class=\"form-control\" formControlName=\"appointmentDate\"\n                [class.is-invalid]=\"isFieldInvalid('appointmentDate')\">\n              <div class=\"invalid-feedback\" *ngIf=\"isFieldInvalid('appointmentDate')\">\n                Please select a date.\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Visit Type *</label>\n              <div class=\"mt-2\">\n                <div class=\"form-check form-check-inline visit-type-radio\">\n                  <input class=\"form-check-input\" type=\"radio\" formControlName=\"visitType\" id=\"firstVisit\"\n                    value=\"First Visit\">\n                  <label class=\"form-check-label\" for=\"firstVisit\">First Visit</label>\n                </div>\n                <div class=\"form-check form-check-inline visit-type-radio\">\n                  <input class=\"form-check-input\" type=\"radio\" formControlName=\"visitType\" id=\"followUp\"\n                    value=\"Follow-up\">\n                  <label class=\"form-check-label\" for=\"followUp\">Follow-up</label>\n                </div>\n              </div>\n              <div class=\"text-danger small\" *ngIf=\"isFieldInvalid('visitType')\">\n                Please select a visit type.\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row mb-3\">\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Notes</label>\n              <input class=\"form-control\" formControlName=\"notes\"\n                placeholder=\"Enter appointment notes\"/>\n                              <div class=\"text-danger small\" *ngIf=\"isFieldInvalid('notes')\">\n                Please select a visit type.\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <label class=\"form-label\">Diagnosis</label>\n              <textarea class=\"form-control\" formControlName=\"diagnosis\" rows=\"3\"\n                placeholder=\"Enter diagnosis\"></textarea>\n                              <div class=\"text-danger small\" *ngIf=\"isFieldInvalid('diagnosis')\">\n                Please select a visit type.\n              </div>\n            </div>\n          </div>\n\n          <!-- Form Actions -->\n          <div class=\"d-flex justify-content-end mt-4\">\n            <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"cancel()\">\n              <i class=\"bi bi-x-circle\"></i> Cancel\n            </button>\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"appointmentForm.invalid\">\n              <i class=\"bi bi-check-circle\"></i> Save Appointment\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<pre>{{ appointmentForm.status }}</pre>\n<pre>{{ appointmentForm.errors | json }}</pre>\n<pre>{{ appointmentForm.value | json }}</pre>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}